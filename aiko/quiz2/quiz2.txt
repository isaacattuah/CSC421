QUIZ 2

Name:Isaac Attuah

Date out: 26 aug 2020
Date due:  2 sep 2020

grade: 4/4



Copy this file to your own _username_/quiz2/ folder. Do not modify
anything in the class folder, else subversion will stop your commits! 
Put your name where it says "Name".


Concerning Makefile:

1) What does the word target do? 
   Why are the words printed in the correct order?

   The words target points to the dependency word-3 which is another target in the set of rules which points to word-2. The word-2 target requires the dependency word-1. The word-1 target has no dependency so it runs its command (@echo -n The\). This action triggers subsequent previous targets waiting on their respective dependencies run completion. Since the targets run in the order word-1, word-2, word-3 and words the words are printed in the correct order.

2) Change the target to write "is The price right!"
    Done. Kindly reference the Makefile. My changes are also indicated below:
words: word-2
	@echo right!

word-1: word-3
	@echo -n The\ 

word-2: word-1
	@echo -n  price\ 

word-3: 
	@echo -n is\

2) What does the count target do?
   What idea was used to printout a count.
   The count target runs the count-1 target three times within its set of rules. The count-1 target echoes a "" character to a count.txt file (It creates a new file count.txt if it does not exist or it appends count.txt if it exists). Finally, it reads the content of count.txt to standard output and pipes that output to the word count command which finds the byte count. The count.txt file is then removed. 

   
3) Modify the count target to count by 7's starting and 7 and ending at 21.
Done. Kindly reference the Makefile. My changes are also indicated below: 
count:
	@make count-1
	@make count-1
	@make count-1
	rm count.txt

count-1:
	@echo "      " >> count.txt
	@cat count.txt | wc -c 

4) What does the target hello do?
The hello target runs the hello.c dependency and compiles hello.c after the hello.c targets runs. The hello.c target is responsible for building the contents of the C program by redirecting an include statement and a main function block that prints "hello" into a hello.c file. 

Concerning Makefile-hello

5) Based on the hello target in Makefile, write a makefile that builds
   a program like the hello.c program, but instead of hello world, prints
   out whatever is in the greetings-file.txt file.

   a- correct behavior should rebuilt the hello.c file when the 
      greetings-file.txt file changes.
   b- correct behavior should rebuid hello when hello.c changes.
   c- correct behavior should not rebuild things unnecessarily.
   d- correct behavior will create a clean target that cleans up the
      build products
   e- correct solutions should fill in the created and last updated 
      with the student name, and some revision/creation date.
Done. Kindly reference Makefile-hello

